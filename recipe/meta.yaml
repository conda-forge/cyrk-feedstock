{% set name = "CyRK" %}
{% set version = "0.13.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/cyrk-{{ version }}.tar.gz
  sha256: 3e57e33522d00b518ed4f7ab290d2827d2310c5f91af6c1a15d0c42d757c617f

build:
  skip: true  # [py>312]
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  number: 0

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ stdlib('c') }}
  host:
    - python
    - setuptools >=64.0.0
    - numpy  # empty version spec will pick up channel pinnings
    # - numpy >=1.22,<2  # cyrk specific pinnings also enforced
    - cython >=3.0.0
    - wheel >=0.38
    - pip
  run:
    - python
    - numba >=0.54.1
    - scipy >=1.9.3
    - {{ pin_compatible('numpy') }}

test:
  imports:
    - CyRK
  commands:
    - pip check
    - python -c "import CyRK; CyRK.test_nbrk(); CyRK.test_cysolver(); CyRK.test_pysolver()"
  requires:
    - pip

about:
  home: https://github.com/jrenaud90/CyRK
  summary: Runge-Kutta ODE Integrator Implemented in Cython and Numba.
  description: |
    CyRK provides fast integration tools to solve systems of ODEs using an adaptive time stepping scheme.
    CyRK can accept differential equations that are written in pure Python, njited numba, or cython-based cdef
    functions. These kinds of functions are generally easier to implement than pure c functions and can be used in
    existing Python software. Using CyRK can speed up development time while avoiding the slow performance that comes
    with using pure Python-based solvers like SciPy's `solve_ivp`.
  license: CC-BY-SA-4.0
  license_file: LICENSE.md
  doc_url: https://github.com/jrenaud90/CyRK/tree/main/Documentation
  dev_url: https://github.com/jrenaud90/CyRK

extra:
  recipe-maintainers:
    - jrenaud90
